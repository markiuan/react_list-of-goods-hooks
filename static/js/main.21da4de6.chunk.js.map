{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","goods","setGoods","sortType","setSortType","isReverse","setIsReverse","className","type","Alphabetical","onClick","sortedGoods","sort","reverse","Length","a","b","lengthComparison","length","reversedGoods","join","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,4BAAAA,E,iBAAAA,M,KAKE,IAAME,EAAgB,WAC3B,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAA0B,MAA1D,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAiDA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAqBJ,IAAaN,EAASY,aAAgB,GAAK,YACzEC,QArDmB,WACzB,IAAMC,EAAc,YAAIV,GAAOW,OAG7BV,EADEG,EACO,YAAIM,GAAaE,UAEjBF,GAGXP,EAAYP,EAASY,eAyCjB,iCAQA,wBACED,KAAK,SACLD,UAAS,4BAAwBJ,IAAaN,EAASiB,OAAU,GAAK,YACtEJ,QAjDa,WACnB,GAAMP,IAAaN,EAASiB,OAAS,CACnC,IAAMH,EAAc,UAAIb,GAAiBc,MAAK,SAACG,EAAGC,GAChD,IAAMC,EAAmBF,EAAEG,OAASF,EAAEE,OAEtC,OAAyB,IAArBD,EACK,EAGFA,KAIPf,EADEG,EACO,YAAIM,GAAaE,UAEjBF,GAGXP,EAAYP,EAASiB,UA4BnB,4BAQA,wBACEN,KAAK,SACLD,UAAS,4BAAuBF,EAAY,GAAK,YACjDK,QAnCa,WACnB,IAAMS,EAAgB,YAAIlB,GAAOY,UAEjCX,EAASiB,GACTb,GAAcD,IA4BV,qBAQCJ,EAAMmB,KAAK,OAAStB,EAAgBsB,KAAK,MACxC,wBACEZ,KAAK,SACLD,UAAU,4BACVG,QArCS,WACjBR,EAAS,GAAD,OAAKJ,IACbM,EAAY,MACZE,GAAa,IA+BP,sBAUJ,6BACGL,EAAMoB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,aChHbC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.21da4de6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetical = 'Alphabetical',\n  Length = 'Length',\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [sortType, setSortType] = useState<SortType | null>(null);\n  const [isReverse, setIsReverse] = useState(false);\n\n  const sortAlphabetically = () => {\n    const sortedGoods = [...goods].sort();\n\n    if (isReverse) {\n      setGoods([...sortedGoods].reverse());\n    } else {\n      setGoods(sortedGoods);\n    }\n\n    setSortType(SortType.Alphabetical);\n  };\n\n  const sortByLength = () => {\n    if (!(sortType === SortType.Length)) {\n      const sortedGoods = [...goodsFromServer].sort((a, b) => {\n        const lengthComparison = a.length - b.length;\n\n        if (lengthComparison === 0) {\n          return 1;\n        }\n\n        return lengthComparison;\n      });\n\n      if (isReverse) {\n        setGoods([...sortedGoods].reverse());\n      } else {\n        setGoods(sortedGoods);\n      }\n\n      setSortType(SortType.Length);\n    }\n  };\n\n  const reverseGoods = () => {\n    const reversedGoods = [...goods].reverse();\n\n    setGoods(reversedGoods);\n    setIsReverse(!isReverse);\n  };\n\n  const resetGoods = () => {\n    setGoods([...goodsFromServer]);\n    setSortType(null);\n    setIsReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${(sortType === SortType.Alphabetical) ? '' : 'is-light'}`}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${(sortType === SortType.Length) ? '' : 'is-light'}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReverse ? '' : 'is-light'}`}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n\n        {goods.join(',') !== goodsFromServer.join(',') && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}